
 



 
 
 



 
 
 <!DOCTYPE html>
<html>
<head>
 <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" >
 <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" >
 
 <meta name="ROBOTS" content="NOARCHIVE">
 
 <link rel="icon" type="image/vnd.microsoft.icon" href="https://ssl.gstatic.com/codesite/ph/images/phosting.ico">
 
 
 <link rel="canonical" href="https://code.google.com/p/csc480-chimera/wiki/SashiMeetingNotes" />
 
 <script type="text/javascript">
 
 
 
 
 var codesite_token = null;
 
 
 var CS_env = {"projectName": "csc480-chimera", "domainName": null, "assetVersionPath": "https://ssl.gstatic.com/codesite/ph/4119706131923068122", "token": null, "profileUrl": null, "assetHostPath": "https://ssl.gstatic.com/codesite/ph", "loggedInUserEmail": null, "relativeBaseUrl": "", "projectHomeUrl": "/p/csc480-chimera"};
 var _gaq = _gaq || [];
 _gaq.push(
 ['siteTracker._setAccount', 'UA-18071-1'],
 ['siteTracker._trackPageview']);
 
 (function() {
 var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
 ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
 (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ga);
 })();
 
 </script>
 
 
 <title>SashiMeetingNotes - 
 csc480-chimera -
 
 Notes from Meetings and emails from Sashi - 
 The SUNY Oswego CSC480 class version of chimera project - Google Project Hosting
 </title>
 <link type="text/css" rel="stylesheet" href="https://ssl.gstatic.com/codesite/ph/4119706131923068122/css/core.css">
 
 <link type="text/css" rel="stylesheet" href="https://ssl.gstatic.com/codesite/ph/4119706131923068122/css/ph_detail.css" >
 
 
 
 <link type="application/atom+xml" rel="alternate" href="/feeds/p/csc480-chimera/svnchanges/basic?path=/wiki/SashiMeetingNotes.wiki">
 
 
<!--[if IE]>
 <link type="text/css" rel="stylesheet" href="https://ssl.gstatic.com/codesite/ph/4119706131923068122/css/d_ie.css" >
<![endif]-->
 <style type="text/css">
 .menuIcon.off { background: no-repeat url(https://ssl.gstatic.com/codesite/ph/images/dropdown_sprite.gif) 0 -42px }
 .menuIcon.on { background: no-repeat url(https://ssl.gstatic.com/codesite/ph/images/dropdown_sprite.gif) 0 -28px }
 .menuIcon.down { background: no-repeat url(https://ssl.gstatic.com/codesite/ph/images/dropdown_sprite.gif) 0 0; }
 
 
 #maincol {
 padding-top: 0;
 padding-bottom: 0;
 }

 
 </style>
</head>
<body class="t6">
<script type="text/javascript">
 window.___gcfg = {lang: 'en'};
 (function() 
 {var po = document.createElement("script");
 po.type = "text/javascript"; po.async = true;po.src = "https://apis.google.com/js/plusone.js";
 var s = document.getElementsByTagName("script")[0];
 s.parentNode.insertBefore(po, s);
 })();
</script>
<div class="headbg">

 <div id="gaia">
 

 <span>
 
 
 <a href="#" id="projects-dropdown" onclick="return false;"><u>My favorites</u> <small>&#9660;</small></a>
 | <a href="https://www.google.com/accounts/ServiceLogin?service=code&amp;ltmpl=phosting&amp;continue=https%3A%2F%2Fcode.google.com%2Fp%2Fcsc480-chimera%2Fwiki%2FSashiMeetingNotes&amp;followup=https%3A%2F%2Fcode.google.com%2Fp%2Fcsc480-chimera%2Fwiki%2FSashiMeetingNotes" onclick="_CS_click('/gb/ph/signin');"><u>Sign in</u></a>
 
 </span>

 </div>

 <div class="gbh" style="left: 0pt;"></div>
 <div class="gbh" style="right: 0pt;"></div>
 
 
 <div style="height: 1px"></div>
<!--[if lte IE 7]>
<div style="text-align:center;">
Your version of Internet Explorer is not supported. Try a browser that
contributes to open source, such as <a href="http://www.firefox.com">Firefox</a>,
<a href="http://www.google.com/chrome">Google Chrome</a>, or
<a href="http://code.google.com/chrome/chromeframe/">Google Chrome Frame</a>.
</div>
<![endif]-->



 <table style="padding:0px; margin: 0px 0px 10px 0px; width:100%" cellpadding="0" cellspacing="0"
 itemscope itemtype="http://schema.org/CreativeWork">
 <tr style="height: 58px;">
 
 
 
 <td id="plogo">
 <link itemprop="url" href="/p/csc480-chimera">
 <a href="/p/csc480-chimera/">
 
 <img src="https://ssl.gstatic.com/codesite/ph/images/defaultlogo.png" alt="Logo" itemprop="image">
 
 </a>
 </td>
 
 <td style="padding-left: 0.5em">
 
 <div id="pname">
 <a href="/p/csc480-chimera/"><span itemprop="name">csc480-chimera</span></a>
 </div>
 
 <div id="psum">
 <a id="project_summary_link"
 href="/p/csc480-chimera/"><span itemprop="description">The SUNY Oswego CSC480 class version of chimera project</span></a>
 
 </div>
 
 
 </td>
 <td style="white-space:nowrap;text-align:right; vertical-align:bottom;">
 
 <form action="/hosting/search">
 <input size="30" name="q" value="" type="text">
 
 <input type="submit" name="projectsearch" value="Search projects" >
 </form>
 
 </tr>
 </table>

</div>

 
<div id="mt" class="gtb"> 
 <a href="/p/csc480-chimera/" class="tab ">Project&nbsp;Home</a>
 
 
 
 
 <a href="/p/csc480-chimera/downloads/list" class="tab ">Downloads</a>
 
 
 
 
 
 <a href="/p/csc480-chimera/w/list" class="tab active">Wiki</a>
 
 
 
 
 
 <a href="/p/csc480-chimera/issues/list"
 class="tab ">Issues</a>
 
 
 
 
 
 <a href="/p/csc480-chimera/source/checkout"
 class="tab ">Source</a>
 
 
 
 
 
 
 
 <a href="https://code.google.com/export-to-github/export?project=csc480-chimera">
 <button>Export to GitHub</button>
 </a>
 
 
 
 
 
 <div class=gtbc></div>
</div>
<table cellspacing="0" cellpadding="0" width="100%" align="center" border="0" class="st">
 <tr>
 
 
 
 <td class="subt">
 <div class="issueDetail">
<div class="isf">
 
 <span class="inIssueList"> 
 <span>Search</span>
 <form action="/p/csc480-chimera/w/list" method="GET" style="display:inline">
 <select id="can" name="can" >
 <option disabled="disabled">Search within:</option>
 
 <option value="1" >&nbsp;All wiki pages</option>
 <option value="3" >&nbsp;Featured pages</option>
 <option value="2" selected="selected">&nbsp;Current pages</option>
 
 
 <option value="4" >&nbsp;Deprecated pages</option>
 
 </select>
 <span>for</span>
 <span id="qq"><input type="text" size="38" id="searchq" name="q" value=""
 autocomplete="off" ></span>
 
 
 
 <input type="submit" value="Search" >
 </form>
 </span>

 
 
 
 
 
 
 

</div>
</div>

 </td>
 
 
 
 
 
 
 <td align="right" valign="top" class="bevel-right"></td>
 </tr>
</table>


<script type="text/javascript">
 var cancelBubble = false;
 function _go(url) { document.location = url; }
</script>
<div id="maincol"
 
>

 







 <style type="text/css">
 .delcom { background: #e8e8e8 }
 .commentcontent {
 margin: 2em;
 padding: 0px 10px;
 width: 66em;
 }
 .artifactcomment {
 border-top: 3px solid #c3d9ff;
 }
 #commentform {
 border-top: 3px solid #c3d9ff;
 }
 </style>

<div id="wikipage">
<table>
 <tr>
 
 
 <td style="vertical-align:top; padding-left:5px">
 
 <div id="wikiheader">
 
 <span style="font-size:120%;font-weight:bold">SashiMeetingNotes</span>
 &nbsp;
 <div> 
 
 <i>Notes from Meetings and emails from Sashi</i>
 
 
 
 <div id="wikiauthor" style="float:right">
 Updated <span title="Thu Feb  4 13:41:35 2010">
 Feb 4, 2010</span>
 
 by 

 <a class="userlink"
 href="/u/113087721853980337863/">jcu...@gmail.com</a
>
 
 </div>
 </div>
 </div>
 
 <div id="wikicontent">
 <div class="vt" id="wikimaincol">
 <h1><a name="Introduction"></a>Introduction<a href="#Introduction" class="section_anchor"></a></h1><p>Here is an ongoing list of notes from meetings with Dr. Kanbur as well as emails sent from him. </p><hr/><h1><a name="4/7_Test_Images_from_Sashi"></a>4/7 Test Images from Sashi<a href="#4/7_Test_Images_from_Sashi" class="section_anchor"></a></h1><p>A preliminary set of test images is in the file moxie:/tmp/test1.tar.gz   These were images of one Landolt field, taken at different times during the night using chimera in robotic mode from the telescope in Brazil last summer. You should run them through Astrometry.net and try and find the WCS plus the coords of the stars in the image. You can then look up the Landolt Stars catalogues on the web and find which of the stars in a particular image are Landolt standards  and try to identify that star in all the images. I believe it will be Landolt standard SA112223. Its RA should be close to 20:42:14 and its dec should be close to 00: 09:01.   So I would suggest: <ul><li>Do photometry on all the images. </li><blockquote>So run one image through astrometry.net and write the WCS. 
Identify the point sources get the photometry and seeing from sextractor and write these results to the database 
</blockquote></ul>  <ul><li>Identify the point source with RA and dec close to those given above and then identify this object in all the images. Then find the hour angle of the time of observation, get the air mass and regress this on the instrumental magnitude and get the extinction coefficient. </li></ul>  <ul><li>I dont have numbers for what these should be at this stage. I wouldnt worry about that too much. The images should also show you what its like in the &quot;real world&quot; The images arent as good as those you have been using from the web site I showed you. </li></ul>  </p><hr/><h1><a name="2/18_Meeting_with_Sashi"></a>2/18 Meeting with Sashi<a href="#2/18_Meeting_with_Sashi" class="section_anchor"></a></h1><h2><a name="Photometry"></a>Photometry<a href="#Photometry" class="section_anchor"></a></h2><p>Software to be downloaded and tested: <ul><li>DS9 - <a href="http://hea-www.harvard.edu/RD/ds9/" rel="nofollow">http://hea-www.harvard.edu/RD/ds9/</a> </li><li>SExtractor - <a href="http://sextractor.sourceforge.net/" rel="nofollow">http://sextractor.sourceforge.net/</a> </li><li>Astrometry.net - <a href="http://astrometry.net/use.html" rel="nofollow">http://astrometry.net/use.html</a> </li><li>IRAF - <a href="http://iraf.noao.edu/" rel="nofollow">http://iraf.noao.edu/</a>  </li><li>WCSTools - <a href="http://tdc-www.harvard.edu/software/wcstools/" rel="nofollow">http://tdc-www.harvard.edu/software/wcstools/</a> </li><li>Sky2XY - <a href="http://tdc-www.harvard.edu/wcstools/sky2xy.html" rel="nofollow">http://tdc-www.harvard.edu/wcstools/sky2xy.html</a> </li></ul></p><p>This uses the RA and DEC coordinates and converts them to the X and Y coordinates on the CCD <ul><li>Pyraf (IRAF for Python) - <a href="http://www.stsci.edu/resources/software_hardware/pyraf" rel="nofollow">http://www.stsci.edu/resources/software_hardware/pyraf</a> </li></ul>  <ul><li>Explore site and download images from <a href="http://stdatu.stsci.edu/" rel="nofollow">http://stdatu.stsci.edu/</a> </li><blockquote>- Use RA and Dec and take picture 
</blockquote></ul></p><ul><li>Compare images and location to make sure they are the same at Astrometry.net (upload images to Astrometry.net) </li><li>Run data reduction on image using IRAF </li><li>Open images using DS9  </li><li>Look into FITS images, and understand the tags in the header of the files (Flexible Image Transport System) </li></ul><p><strong>Look at and understand pointverify.py <blockquote>- <a href="http://code.google.com/p/csc480-chimera/source/browse/trunk/csc480chimera/src/chimera/controllers/pointverify.py" rel="nofollow">http://code.google.com/p/csc480-chimera/source/browse/trunk/csc480chimera/src/chimera/controllers/pointverify.py</a> 
</blockquote><ul><li>Look at and understand autofocus.py </li></ul><blockquote>- <a href="http://code.google.com/p/csc480-chimera/source/browse/trunk/csc480chimera/src/chimera/interfaces/autofocus.py" rel="nofollow">http://code.google.com/p/csc480-chimera/source/browse/trunk/csc480chimera/src/chimera/interfaces/autofocus.py</a> 
- This will show you how photometry is done. 
- WSC is a translation between sky position and CCD 
</blockquote><ul><li>Look at, understand, and debug fakecamera.py </li></ul><blockquote>- <a href="http://code.google.com/p/csc480-chimera/source/browse/trunk/csc480chimera/src/chimera/drivers/fakecamera.py" rel="nofollow">http://code.google.com/p/csc480-chimera/source/browse/trunk/csc480chimera/src/chimera/drivers/fakecamera.py</a> 
- The fake observatory (download the pictures) works the same way as the real thing. You can use sequential downloading and then run all the photometry processes on the files sequentially 
</blockquote></strong></p><ul><li>The final outcome of our project will be a database the following information: </li></ul><blockquote>- Object name, RA and DEC, object flux (i) 
- Object names will come from the ascii list the user supplies 
</blockquote><ul><li> <strong>Big things (From Dr. Kanbur):</strong> </li></ul><ol><li>Still trying to understand more of the photometry. Source extractor (Sextractor) should be able to do all of it! Autofocus will help! </li><li>Download WCSTools, DS9, Astrometry.net, and IRAF </li><li>In utils there is astrometrynet.py… look at it! </li><ul><li><a href="http://code.google.com/p/csc480-chimera/source/browse/trunk/csc480chimera/src/chimera/util/astrometrynet.py" rel="nofollow">http://code.google.com/p/csc480-chimera/source/browse/trunk/csc480chimera/src/chimera/util/astrometrynet.py</a> </li></ul><li>Somebody really needs to fix fakecamera.py </li><li>Be careful with IRAF as it might mess with the Python version </li><li>DS9 is the VIEWER but IRAF manipulates the files </li><ul><li>Need IRAF for data reduction </li><li>Astrometry.net will write into the FITS file </li></ul></ol><h2><a name="Seeing"></a>Seeing<a href="#Seeing" class="section_anchor"></a></h2><ul><li><strong>Order of Operations for Chimera</strong> </li><ol><li>move telescope </li><li>take pic </li><li>confirm location with astrometry.net </li><li>take desired picture of star </li><li>photometry (write to database) </li><li>extinction (compute AM and extinction) </li><li>seeing (run sextractor, get info from fits files) </li></ol></ul><ul><li>sextractor will compute the seeing </li></ul><ul><li><strong>requirements</strong> </li><ol><li>be able to use sextractor wrapper (in util) with fits file </li><li>extract info from file after wrapper completes </li><li>take user inputs for database request </li><li>give back database matches </li></ol></ul><ul><li>look at extinction.py (fairly close operations as seeing) </li></ul><h2><a name="Extinction_Coefficient"></a>Extinction Coefficient<a href="#Extinction_Coefficient" class="section_anchor"></a></h2><p>Info about the picture will be given as input from a user in the form of a text file to the scheduler. The telescope will take a picture. The picture will be reduced and photometry will be applied. All data will be put in a database: </p><ul><li>Object Name </li><li>Airmass (Also known as &quot;x&quot; or &quot;hour angle&quot; which is the angle between the known star and zenith. To find the airmass is already created in the project. Shashi thinks it is in the Utils.) </li><li>RA </li><li>DEC </li><li>Flux (I) </li></ul><p>Example: An image of a star is taken 5 times throughout the night </p><p>M (Magnitude) &quot;I&quot; (Flux) X (Hour Angle) </p><p>M1 = 2.5*log(I1)        X1 M2 = 2.5*log(I2)        X2 M3 = 2.5*log(I3)	X3 M4 = 2.5*log(I4)	X4 M5 = 2.5*log(I5)	 </p><p>Plot M and X - Find Least Fits The extinction coefficient is the slope of the line. </p><p>Shashi wants to see a graph of the plot M and X and slope. </p><hr/><h1><a name="2/20_Extinction_(polynomical_fit)"></a>2/20 Extinction (polynomical fit)<a href="#2/20_Extinction_(polynomical_fit)" class="section_anchor"></a></h1><blockquote>The file autofocuser.py has a method to do a polynomical fit. You may want to look at that for the extinction. Shashi 
</blockquote><hr/><h1><a name="2/20_Chimera_poster_and_flow_chart"></a>2/20 Chimera poster and flow chart<a href="#2/20_Chimera_poster_and_flow_chart" class="section_anchor"></a></h1><blockquote>A nice poster and flow chart describing chimera is at 
</blockquote><p>   <blockquote><a href="http://www.oswego.edu/~kanbur/IRES2008/isaac.pdf" rel="nofollow">http://www.oswego.edu/~kanbur/IRES2008/isaac.pdf</a> 
</blockquote></p><blockquote>Take a look, particularly at the flow chart. 
</blockquote><blockquote>For those in the photometry project, take a look at autofocus.py in the controllers section - it may show you how to do photometry. Shashi 
</blockquote><hr/><h1><a name="2/20_sample_abstracts_for_QUEST_opportunities"></a>2/20 sample abstracts for QUEST opportunities<a href="#2/20_sample_abstracts_for_QUEST_opportunities" class="section_anchor"></a></h1><h2><a name="Photometry"></a>Photometry<a href="#Photometry" class="section_anchor"></a></h2><ul><li>Aperture photometry in the Chimera Robotic Telescope Control System </li><li>Student’s names James P. Early, Shashi Kanbur </li><li>The Chimera Robotic Telescope Control System is a exible software program to automate a professional astronomical observatory. Here we describe one of its components: aperature photometry. We describe aperture photometry and its general implementation in Chimera and display some preliminary results from early versions of the module. </li></ul><h2><a name="Seeing"></a>Seeing<a href="#Seeing" class="section_anchor"></a></h2><ul><li>A seeing module for the Chimera Robotic Telescope System </li><li>Student Names James P. Early, Shashi M. Kanbur </li><li>Chimera is exible software system for controlling professional astronomical observatories. The Astronomical seeing is a measure of the ”blurriness” of the atmosphere and is an important quantity to know. Here we describe a preliminary version of a Chimera module to automatically compute astronomical seeing. </li></ul><h2><a name="Extinction"></a>Extinction<a href="#Extinction" class="section_anchor"></a></h2><ul><li>An Extinction Module for the Chimera Robotic Telescope System </li><li>Students Names James P. Early, Shashi M. Kanbur </li><li>Chimera is a exible program for automating a professional astronomical observatory. Here we describe a module for obtaining nightly extinction coefficients. We describe what the extinction is, the general form of implementation in Chimera and present some preliminary results. </li></ul><hr/><h1><a name="2/16_fakecamera.py_bug_fix"></a>2/16 fakecamera.py bug fix<a href="#2/16_fakecamera.py_bug_fix" class="section_anchor"></a></h1><blockquote>The routine fakecamera.py, if the variable dss is set to TRUE makes a call to the web site I showed you and downloads the available picture at the RA and dec of the telescope. This year, its seems the site doesnt gzip the pictures and the code is trying to ungzip a file which has already been gzipped. If I remove the gzip (right after the call to the st web site), then the system doesnt take a proper picture and crashes. This is a specific bug which you guys could work on. It would be great to get the virtual observatory working. 
Shashi 
</blockquote><hr/><p>  </p><h1><a name="2/15_How_to_use_fakecamera.py"></a>2/15 How to use fakecamera.py<a href="#2/15_How_to_use_fakecamera.py" class="section_anchor"></a></h1><blockquote>Heres where I am at the moment: 
In src/chimera/drivers/fakecamera.py change use_dss to be True (in the <i></i>config<i></i> at the top). You may need to remake things (setup.py install) 
</blockquote><blockquote>To start chimera, in one terminal type src/scripts/chimera -vv 
</blockquote><blockquote>In another terminal type: 
</blockquote><ul><li>src/scripts/chimera-dome --open </li><li>src/scripts/chimera-dome --track </li><li>src/scripts/chimera-tel --unpark </li><li>src/scripts/chimera-tel --init </li><li>src/scripts/chimera-tel --start-tracking </li><li>src/scripts/chimera-tel --slew --ra=22:00:00 -dec=30:00:00 </li><li>src/scripts/chimera-cam --expose -t=2 </li></ul><p>  <blockquote>This takes an exposre pointed at the ra and dec above. But it goes to the SDDS survey online and retrieves the image from that position - in drivers/fakecamera.py look for url=&quot;<a href="http://stdatu" rel="nofollow">http://stdatu</a>...... 
</blockquote>  <blockquote>The log shows that it doesnt quite work: saying the file retrieved isnt a gzipped file. See if you can fix this bug. 
</blockquote>  <blockquote>Shashi 
</blockquote></p><hr/><h1><a name="2/15_Extinction_and_Seeing_notes"></a>2/15 Extinction and Seeing notes<a href="#2/15_Extinction_and_Seeing_notes" class="section_anchor"></a></h1><blockquote>regarding extinction and seeing a good resource is 
<a href="http://spiff.rit.edu/classes/phys445/lectures/atmos/atmos.html" rel="nofollow">http://spiff.rit.edu/classes/phys445/lectures/atmos/atmos.html</a> 
</blockquote><p>   <blockquote>So for the extinction project, we observe given standard stars at different times during the night. Reduce the data, do aperature photometry and get instrumental magnitudes for them at different times during the night. Call z = angle between the star and the zenith (the point directly overhead). The airmass, X = sec(z). 
</blockquote>  <blockquote>Then the instrumental magnitude m(X) = m_0 + k*X  
where k is the extinction coefficient. In the notes the abbreviation AM stands for AirMass. 
</blockquote>  <blockquote>So the position of the star at different times during the night gives X, and observing the star and doing photometry gives m(X) and doing a fit as above gives the extinction coefficient k. 
</blockquote>  <blockquote>As an initial routine they could write a python routine to do a least squares fit between any two sets of numbers. This could be the basis of the seeing routine. 
</blockquote>  <blockquote>Shashi 
</blockquote></p><hr/><h1><a name="2/13_config_file"></a>2/13 config file<a href="#2/13_config_file" class="section_anchor"></a></h1><ul><li>Here is the configuration file for the virtual observatory. Shashi </li></ul><p>---------- Forwarded message ---------- From: Isaac Richter Date: Thu, Feb 12, 2009 at 11:11 AM Subject: Re: virtual observatory To: Shashi Kanbur </p><p>Sorry -- took a bit more time to track it down than I thought it would. Just save the following in a file, and then tell chimera to use that file as the configuration file (see &quot;scripts/chimera --help&quot;). </p><p>--Isaac </p><p><pre><span class="error">&lt;chimera host="localhost" port="7666"&gt;</span></pre> </p><p><pre><span class="error">&lt;instruments&gt;</span></pre> <pre><span class="error">&lt;instrument name="tel" class="Telescope"&gt;</span></pre> <pre><span class="error">&lt;option name="driver" value="/FakeTelescope/0"&gt;</span></pre><pre><span class="error">&lt;/option&gt;</span></pre> <pre><span class="error">&lt;/instrument&gt;</span></pre> <pre><span class="error">&lt;instrument name="dome" class="Dome"&gt;</span></pre> <pre><span class="error">&lt;option name="driver" value="/FakeDome/0"&gt;</span></pre><pre><span class="error">&lt;/option&gt;</span></pre> <pre><span class="error">&lt;/instrument&gt;</span></pre> <pre><span class="error">&lt;instrument name="cam" class="Camera"&gt;</span></pre> <pre><span class="error">&lt;option name="driver" value="/FakeCamera/0"&gt;</span></pre><pre><span class="error">&lt;/option&gt;</span></pre> <pre><span class="error">&lt;/instrument&gt;</span></pre> <pre><span class="error">&lt;instrument name="wheel" class="FilterWheel"&gt;</span></pre> <pre><span class="error">&lt;option name="driver" value="/FakeFilterWheel/0"&gt;</span></pre><pre><span class="error">&lt;/option&gt;</span></pre> <pre><span class="error">&lt;/instrument&gt;</span></pre> <pre><span class="error">&lt;instrument name="focuser" class="Focuser"&gt;</span></pre> <pre><span class="error">&lt;option name="driver" value="/FakeFocuser/0"&gt;</span></pre><pre><span class="error">&lt;/option&gt;</span></pre> <pre><span class="error">&lt;/instrument&gt;</span></pre> <pre><span class="error">&lt;/instruments&gt;</span></pre> </p><p><pre><span class="error">&lt;drivers&gt;</span></pre> <pre><span class="error">&lt;driver name="ft" class="FakeTelescope"&gt;</span></pre><pre><span class="error">&lt;/driver&gt;</span></pre> <pre><span class="error">&lt;driver name="fc" class="FakeCamera"&gt;</span></pre> <pre><span class="error">&lt;option name="ccd_width" value="50"&gt;</span></pre><pre><span class="error">&lt;/option&gt;</span></pre> <pre><span class="error">&lt;option name="ccd_height" value="50"&gt;</span></pre><pre><span class="error">&lt;/option&gt;</span></pre> <pre><span class="error">&lt;option name="use_dss" value="true"&gt;</span></pre><pre><span class="error">&lt;/option&gt;</span></pre> <pre><span class="error">&lt;/driver&gt;</span></pre> <pre><span class="error">&lt;driver name="fw" class="FakeFilterWheel"&gt;</span></pre><pre><span class="error">&lt;/driver&gt;</span></pre> <pre><span class="error">&lt;driver name="ff" class="FakeFocuser"&gt;</span></pre><pre><span class="error">&lt;/driver&gt;</span></pre> <pre><span class="error">&lt;driver name="fd" class="FakeDome"&gt;</span></pre><pre><span class="error">&lt;/driver&gt;</span></pre> <pre><span class="error">&lt;/drivers&gt;</span></pre> </p><p><pre><span class="error">&lt;controllers&gt;</span></pre> <pre><span class="error">&lt;controller name="imageserver" class="ImageServer"&gt;</span></pre><pre><span class="error">&lt;/controller&gt;</span></pre> <pre><span class="error">&lt;controller name="xmlrpc" class="XMLRPC"&gt;</span></pre><pre><span class="error">&lt;/controller&gt;</span></pre> <pre><span class="error">&lt;/controllers&gt;</span></pre> </p><p><pre><span class="error">&lt;site&gt;</span></pre> <pre><span class="error">&lt;name&gt;</span></pre>UFSC<pre><span class="error">&lt;/name&gt;</span></pre> <pre><span class="error">&lt;latitude&gt;</span></pre>-27:36:12.286<pre><span class="error">&lt;/latitude&gt;</span></pre> <pre><span class="error">&lt;longitude&gt;</span></pre>-48:31:20.535<pre><span class="error">&lt;/longitude&gt;</span></pre> <pre><span class="error">&lt;altitude&gt;</span></pre>20<pre><span class="error">&lt;/altitude&gt;</span></pre> <pre><span class="error">&lt;utc_offset&gt;</span></pre>-3<pre><span class="error">&lt;/utc_offset&gt;</span></pre> <pre><span class="error">&lt;dst&gt;</span></pre>False<pre><span class="error">&lt;/dst&gt;</span></pre> <pre><span class="error">&lt;/site&gt;</span></pre> <pre><span class="error">&lt;site&gt;</span></pre> <pre><span class="error">&lt;name&gt;</span></pre>LNA<pre><span class="error">&lt;/name&gt;</span></pre> <pre><span class="error">&lt;latitude&gt;</span></pre>-22:32:08.066<pre><span class="error">&lt;/latitude&gt;</span></pre> <pre><span class="error">&lt;longitude&gt;</span></pre>-45:34:58.480<pre><span class="error">&lt;/longitude&gt;</span></pre> <pre><span class="error">&lt;altitude&gt;</span></pre>20<pre><span class="error">&lt;/altitude&gt;</span></pre> <pre><span class="error">&lt;utc_offset&gt;</span></pre>-3<pre><span class="error">&lt;/utc_offset&gt;</span></pre> <pre><span class="error">&lt;dst&gt;</span></pre>False<pre><span class="error">&lt;/dst&gt;</span></pre> <pre><span class="error">&lt;/site&gt;</span></pre> </p><p><pre><span class="error">&lt;/chimera&gt;</span></pre> </p><p>On 2/12/09, Shashi Kanbur wrote: Hi, can you get me those config files? Thanks, Shashi </p><blockquote>On Wed, Feb 11, 2009 at 1:06 PM, Isaac Richter 
wrote: 
</blockquote><blockquote>I can get them to you tonight -- I will have to pull them out of 
archives on an external hard drive once I get back to my room. 
</blockquote><blockquote>--Isaac 
</blockquote><blockquote>On Wed, Feb 11, 2009 at 9:44 AM, Shashi Kanbur wrote: 
Can you send me the config files you mention here? 
Shashi 
</blockquote><blockquote>On Tue, Feb 10, 2009 at 4:24 PM, Isaac Richter wrote: <a href="http://code.google.com/p/chimera/source/....s/fakecamera.py" rel="nofollow">http://code.google.com/p/chimera/source/....s/fakecamera.py</a> 
</blockquote><blockquote>See <i></i>config<i></i> starting on line 55. Note the use_dss option (if this is false, it won&#x27;t use real star fields). Also note configuration of the telescope instrument and dome instrument to which to link. 
</blockquote><blockquote>Next interesting stuff is found in <i>readout. Line 210-212 covers making darks, Next, starting on line 221, if use_dss is true and the dome slit is aligned with the telescope (and the dome slit is open)the driver will attempt to download a dss image of the requisite location. (If this fails, it makes a flat instead.) In all cases, fakecamera will simulate the detector issues (dark current and pixel variations) on the output data. 
</blockquote><blockquote>Probably, the easiest way to do all this is to use a site config file that sets up your fake dome, telescope, and camera with all of the correct parameters. I don&#x27;t have access to the site files that I used for the fake equipment right now since I am booted into windows, but I will get them to you when I have a chance. 
</blockquote><p>--Isaac </i></p><blockquote>On Tue, Feb 10, 2009 at 3:17 PM, Shashi Kanbur wrote: So its in fakecamera.py? Can you give me some more details? Shashi 
</blockquote><blockquote>On Tue, Feb 10, 2009 at 2:01 PM, Isaac Richter wrote: 
Shashi, 
That code is, as far as I know, still in SVN. It is done by modifying configuration parameters for the FakeCamera camera driver. The code requires that the dome be open and tracking the telescope (and you have to specify a dome and telescope for the FakeCamera driver to talk to). Otherwise, it just gives you either a fake dark or a fake flat. It is possible that the URL used to download the DSS data used to make the observations is no longer working. In that case, it probably substitutes a fake dark. 
</blockquote><p>--Isaac </p><blockquote>On Tue, Feb 10, 2009 at 11:15 AM, Shashi Kanbur wrote: 
Isaac, would you be willing to share the code you wrote last summer which permitted fake observations to be made to test chimera? Shashi 
</blockquote><hr/><h1><a name="2/11_Chimera_Explained"></a>2/11 Chimera Explained<a href="#2/11_Chimera_Explained" class="section_anchor"></a></h1><p>Chimera is an all-inclusive software package for those wishing to automate their telescope/CCD system. It can be run from the command line, or from an interactive GUI interface. Chimera is written in Python, a powerful, user-friendly, object-oriented language growing in popularity among the scientific community with Python modules available for many applications, for example matplotlib for plotting or pyraf for astronomical data reduction, or her own modules to add to Chimera, and customize Chimera for specific research tasks. Modularity is the main theme of Chimera. Because of this it is easy for a user to add his or her own modules to Chimera and customize it for specific research tasks. It is also easy to add new instruments and drivers since modularity separates hardware independent and hardware dependent code. The user only sees the hardware independent part of Chimera. For example, the command to take a CCD image is and always will be the same regardless of the user location, location and type of telescope/camera. Chimera will smoothly interface new drivers and equipment with familiar commands. Not only is Chimera modular in terms of its inherent structure, but it is also possible to distribute tasks between locations. What this means is that although the telescope and camera are physically located at Itajuba, MInas Gerais, Brazil, a PC at UFSC, Florianopolis, Brasil could be controlling the telescope, whilst a PC located at Oswego, NY, USA controls the CCD camera but a scientist located at Mount Stromlo Obervatory, Australia, is issuing commands to slew the telescope to a given position and take a number of CCD frames. Moreover, the observing program of this scientist at Mount Stromlo can be entirely automated so that he/she need have no further contact with the system after submitting their observing program. More realistically, two or more computers could be operating at an observatory control room, each one controlling a different element of the same telescope, all running Chimera. However, this distributivity will work between computers anywhere in the world. </p><p>Details will follow later, but to get an idea of how Chimera actually operates, here is a typical command for the ’chimera-tel,’ or the part of chimera that controls the telescope. </p><p><strong>chimera-tel -tel localhost:10000/Telescope/0 -slew –ra 10:00:00 –dec 10:00:00</strong> </p><p>This tells Chimera both the computer location of the software to control the telescope, and where to slew. Other options include commanding the telescope to track the selected point in the sky or instead of using RA and Dec, use local azimuth and altitude to slew to a desired object. </p><p>At the UFSC observatory, the telescope is controlled by a windows machine but the CCD camera is plugged into a linux machine. To use Chimera at the UFSC observatory: </p><ul><li>Start up Chimera on the windows machine. This machine controls the telescope through the mount. </li></ul><p><strong>chimera -f windows.xml</strong> </p><blockquote>Note this is only for the UFSC Observatory because the telescope mount is proprietary software and can only run on the windows machine. The file windows.xml is a file which contains details about where the telescope driver is located: more about this later. 
</blockquote><ul><li>Then on the linux machine, login and type <strong>chimera -f linux.xml</strong> </li></ul><blockquote>The file linux.xml contains information about where the camera driver etc. is located (again more about this later). If all goes well, some messages giving information about the status of the system should appear on the screen. Typing 
</blockquote><p><strong>chimera -f linux.xml –vv</strong> </p><blockquote>will give you more information about whats going on. 
</blockquote><ul><li>Then to point the telescope, type on the Linux machine </li></ul><p><strong>chimera-tel –tel localhost:10000/Telescope/0 –slew –ra=&lt; coords &gt; –dec=&lt; coords &gt;</strong> </p><ul><li>To take an image with the camera, on the Linux machine type </li></ul><p><strong>chimera-cam –camera localhost:10000/Camera/0 -n</strong>&lt; numberofexposures &gt; <strong>-t</strong>&lt; exposuretimeinseconds &gt;<strong> -o</strong>&lt; basenameoffitsfile &gt; </p><blockquote>The option -s can be used with OPEN and/or CLOSE to open or close the camera shutter. 
</blockquote><ul><li>To take a bias, close the shutter and set the exposure time to t=0. </li></ul><ul><li>To take a dark, close the shutter and set the exposure time to be similar to the exposure time for the science image. </li></ul><ul><li>To change the filter and take an exposure with a new filter type </li></ul><p><strong>chimera-cam –camera localhost:10000/Camera/0 –wheel localhost:10000/FilterWheel/0 -f</strong> &lt; filteroption &gt; <strong>-n</strong> &lt; numberofexposures &gt; <strong>-t</strong> &lt; exposuretimeinseconds &gt; <strong>-o</strong> &lt; basenameofFITSimagefiles &gt;<strong>-s</strong> &lt; OPEN/CLOSE &gt; </p><ul><li>The available filter options at UFSC are CLEAR (no filter), RED, BLUE, GREEN, VIOLET and LUNAR. </li></ul><ul><li><strong>chimera-tel –help</strong> gives you all the options available with this. Similarly for <strong>chimera-cam –help</strong>. Other instruments accessible in this way are chimera-dome and chimera-focus. </li></ul><ul><li>The components of the system consist of a hardware instrument (say the camera) connected to some PC and on this PC resides a piece of software called the hardware driver. This hardware driver is code which talks and controls the camera directly. In order to manipulate the camera, users don’t use the hardware driver directly but interact with it through the program chimera-cam. As above chimera-cam can tell the camera to open/close its shutter, take a filter of specified exposure time, take more than one exposure and change the filter in front of the camera. In fact chimera-cam talks to the camera through the ”software instrument” camera which in turn talks to the driver. The software instrument camera is hardware independent. This structure is true for all the ”instruments” currently available: a dome, focuser, camera, telescope and filterwheel. </li></ul><ul><li>The command chimera-cam –help gives details of all of these options. </li></ul><ul><li>As an example, the following command tells the camera to open the shutter, chimera-cam –camera localhost:10000/Camera/0 -s OPEN </li></ul><ul><li>We will discuss the <strong>localhost:10000....</strong> shortly. </li></ul><ul><li>To take an exposure of 10 seconds duration, type <strong>chimera-cam –camera localhost:10000/Camera/0 -s OPEN -n 1 -t 10</strong> </li></ul><ul><li>To take an exposure of 10 seconds with the RED filter, type <strong>chimera- cam –camera localhost:10000/Camera/0 –wheel localhost:10000/FilterWheel/0 -f RED -n 1 -t 10</strong> </li></ul><ul><li>A bias frame can be taken with an exposure of 0 seconds and the shutter closed as in <strong>chimera-cam –camera localhost:10000/Camera/0 -n 1 -t 0 -s CLOSE</strong> </li></ul><ul><li>A dark fram can be taken with an exposure of, say 10 seconds, and the shutter closed as in <strong>chimera-cam –camera localhost:10000/Camera/0 -n 1 -t 10 -s CLOSE</strong> </li></ul><ul><li>The images are stored as fits files. They can be given special names using the -o option which specifies a base name. So chimera-cam – camera localhost:10000/Camera/0 -n 3 - t 10 -o shashi will give the 3 FITS files created by this command a base name of shashi. All images taken with this base name are numbered sequentially according to the order they were taken in. </li></ul><ul><li>The chimera system consists of a dome, a camera, a telescope, and a focuser. Each instrument is controlled by the programs <strong>chimera-dome</strong>, <strong>chimera-cam</strong>, <strong>chimera-tel</strong>, <strong>chimera-focus</strong>. Typing chimera-dome <strong>–help</strong> etc. gives help on all the available options with these commands. </li></ul><ul><li>A basic option with these commands specifies where software to control that particular instrument resides. The following are not complete commands but presented merely to show the nature of the option to specify the location of the software for that particular instrument. </li></ul><p><strong>chimera-dome –dome localhost:10000/Dome/0 ..... chimera- cam –camera localhost:10000/Camera/0 .... chimera-tel –tel localhost:10000/Telescope/0 ..... chimera-focus –focuser local-host:10000/Focuser/0 .....</strong> </p><ul><li>In principle, this software could be on a different computer. Hence the full nature of this option is <strong>[host:port]/Class/name</strong>. In the case where the software is on the same computer from which the above command is being issued, the host part becomes localhost. The 10000 is the port number. The Class part deals with the way the chimera code is written, but each of the instruments dome, camera, telescope and focuser is thought of as a class with the name Dome, Camera, Telescope, and Focuser. The name corresponds to the number 0 in the above examples. Chimera can control more than one telescope or dome or focuser. Thus to control two telescopes, chimera-tel would refer to them as </li></ul><p><strong>chimera-tel –tel localhost:10000/Telescope/0.... and chimera- tel –tel localhost:10000/Telescope/1....</strong> </p><ul><li>To understand this more, assume the telescope and camera are all physically connected to PC B with IP number 150.162.110.2 but the commands are to be issued from PC A with IP number 129.3.17.53. Then we first install chimera on BOTH machines and start up chimera on machine B with </li></ul><p><strong>chimera -vv -f linux.xml</strong> </p><ul><li>Now on PC A, we issue the command </li></ul><p><strong>chimera-tel –telescope 150.162.110.2:10000/Telescope/0 –info.</strong> </p><ul><li>This gives information on the telescope connected to PC B. </li></ul><ul><li>Thus the following is an example of a chimera command issued on PC A with IP number 129.3.17.53 talking to PC B with IP number 150.162.110.2 </li></ul><p><strong>chimera-tel –telescope 150.162.110.2:10000/Telescope/0 –info</strong> </p><ul><li>This command asks chimera on PC A to contact chimera on PC B and get information for the telescope - called 0. The ”software instrument” for the telescope is located in ..../src/instruments.... and chimera knows its location and hence can find where the code describing ”Telescope” resides. </li></ul><ul><li>The most ”distributed” case is if a telescope is physically connected to machine X, the software instrument resides on machine Y and you are issuing commands from machine Z. Machines X, Y and Z are all connected to the internet and all have chimera installed. Machines X and Y have chimera started through a command similar to chimera -f linux.xml. In the case of machine X, the <strong></strong>.xml file contains details of the telescope driver since the telescope is physically connected to machine X. </li></ul><ul><li>Thus an example of the most general command is </li></ul><p><strong>chimera-tel –telescope 150.162.110.2:10000/Telescope/0</strong> </p><blockquote>issued from machine Z and 150.162.110.2 is the IP number of machine Y. chimera on machine Y is started with information telling it that the driver and hardware instrument is located on machine X. 
</blockquote><ul><li>The scripts chimera-dome, chimera-tel, chimera-cam, chimera-focuser are controlled by the user and talk to the ”software instrument”. This piece of code in turn talks to the driver - code which talks directly to the hardware. The driver is usually supplied by the hardware manufacturer. Its also possible to specify an alternative location for this driver other than the default location. </li></ul><ul><li>Now we describe some options specific to some commands. </li></ul><ul><li>chimera-dome </li></ul><blockquote>– <strong>chimera-dome –track –tel localhost:10000/Telescope/0</strong> 
<blockquote>tells the dome to track the specified telescope. 
</blockquote></blockquote><blockquote>- <strong>chimera-dome –dome localhost:10000/Dome/0 –close</strong> 
<blockquote>closes the dome connected to the local machine. 
</blockquote></blockquote><blockquote>– <strong>chimera-dome –dome 128.119.34.20:20000/Dome/1 –open</strong> 
<blockquote>opens dome number 1 which is connected to the machine with IP number 128.119.34.20 - communication is through port 20000. 
</blockquote></blockquote><blockquote>- <strong>chimera-dome –stand</strong> 
<blockquote>tells the dome to stay stationary. 
</blockquote></blockquote><h2><a name="Installation"></a>Installation<a href="#Installation" class="section_anchor"></a></h2><blockquote>- Requirements to install, just install the package <strong>Flow</strong> 
</blockquote><ul><li>To start up chimera, you need to use chimera -f ¡some file¿ on all the PC’s involved in the system. This file, currently in	xml contains details about the location of that PC, location of other PC’s in the system, what instruments/drivers etc. to load and where they are located. It also starts up managers on all these machines. </li></ul><hr/><h1><a name="2/11_How_to_use_UFSC_Observatory"></a>2/11 How to use UFSC Observatory<a href="#2/11_How_to_use_UFSC_Observatory" class="section_anchor"></a></h1><h2><a name="To_use_Chimera_at_the_UFSC_observatory:"></a>To use Chimera at the UFSC observatory:<a href="#To_use_Chimera_at_the_UFSC_observatory:" class="section_anchor"></a></h2><ul><li>Start up Chimera on the windows machine. This machine controls the telescope through the mount. </li></ul><p><strong>chimera -f windows.xml</strong> </p><blockquote>Note this is only for the UFSC Observatory because the telescope 
mount is proprietary software and can only run on the windows ma- 
chine. 
</blockquote><ul><li>Then on the linux machine, login and type <strong>chimera -f linux.xml</strong>  If all goes well, some messages giving information about the status of the system should appear on the screen. Typing </li></ul><p><strong>chimera -f linux.xml –vv</strong> </p><blockquote>will give you more information about whats going on. 
</blockquote><ul><li>hen to point the telescope, type on the Linux machine </li></ul><p><strong>chimera-tel –tel localhost:10000/Telescope/0 –slew –ra=¡coords¿ –dec=¡coords¿</strong> </p><ul><li>To take an image with the camera, on the Linux machine type </li></ul><p><strong>chimera-cam –camera localhost:10000/Camera/0 -n¡number of exposures¿ -t¡exposure time in seconds¿ -o¡basename of fits file¿</strong> </p><blockquote>The option -s can be used with OPEN and/or CLOSE to open or close the camera shutter. 
</blockquote><ul><li>To take a bias, close the shutter and set the exposure time to t=0. </li></ul><ul><li>To take a dark, close the shutter and set the exposure time to be similar to the exposure time for the science image. </li></ul><ul><li>To change the filter and take an exposure with a new filter type </li></ul><p><strong>chimera-cam –camera localhost:10000/Camera/0 –wheel lo- calhost:10000/FilterWheel/0 -f ¡filteroption¿ -n ¡number of exposures¿ -t ¡exposure time in seconds¿ -o ¡basename of FITS image files¿ -s ¡OPEN/CLOSE¿</strong> </p><ul><li>The available filter options at UFSC are CLEAR (no filter), RED, BLUE, GREEN, VIOLET and U (Extreme Violet). </li></ul><ul><li>chimera-tel –help gives you all the options available with this. Similarly for chimera-cam –help. Other instruments accessible in this way are chimera-dome and chimera-focus. </li></ul><h2><a name="Structure"></a>Structure<a href="#Structure" class="section_anchor"></a></h2><ul><li>At the lowest level you have the actual piece of hardware that you are trying to control robotically: lets take as an example, the camera. </li></ul><ul><li>This is connected by a wire to some PC (which usually is local) which contains the hardware driver for the camera. This hardware driver may be supplied by the manufacturer or is some code which talks to code supplied by the manufacturer. </li></ul><ul><li>Items 1 and 2 are hardware specific. </li></ul><ul><li>The ICamera code sets out the methods by which the Camera Driver communicates with other objects. </li></ul><ul><li>The ICamera code is hardware independent. </li></ul><ul><li>Above these you have the ”software instrument” for the camera. This contains code which any camera should be able to do and code to get the driver for that camera to do exactly that. The ”ICamera” bit sets out the methods by which the software instrument Camera can communicate with other objects. </li></ul><ul><li>Generalizing this, for any Chimera object, we have the hardware, the driver, the interface and the software for that particular object. </li></ul><ul><li>In addition, there can be a finer division of ”things” into (driver, interface, instrument). For example, there can also be an ICameradriver interface which sets out the ways in which the Camera driver communicates  with other objects. Another example is that the interface for the Camera software instrument is actually made up of the interfaces for a Basic Camera, a Basic Camera which can take and abort exposures and another interface which consists of a Basic Camera which also supports temperature monitoring and control. </li></ul><ul><li>Above the software instrument is the interface to the user. Currently its chimera-cam or chimera-tel or chimera-dome but hopefully these will be replaced by some GUI. </li></ul><ul><li>An analogy is a PC running some operating system. The manual is the I<strong></strong><strong></strong> code, the set of allowed commands and the way anybody can communicate with the PC and vice versa. The operating system is the ”software instrument”. You, the user and the operating system have agreed that each can only talk to the other through what is layed out in the manual. Similarly the IDriver is the manual that describes how the operating system and CPU can talk to each other. The combination of driver and actual instrument are the guts of the PC. I look up in the manual what ”ls” means” (I<strong></strong><strong></strong> code), type in ls (”software instrument”) and get back a list of files (driver plus actual instrument). In theory, if I get a new PC running linux, I should be able to just plug in my existing keyboard, read the manual and get the same result when I type in ”ls”. </li></ul><ul><li>Controllers are roughly at the level of chimera-cam or chimera-tel and are used when more than one system, say the camera and telescope and focuser are in use. For example, the autofocuser. The Telescope moves to an object, the camera takes a picture and the autofocuser determines if the object is in focus - if not, the autofocuser adjusts the focus, tells the camera to take another picture etc. So the autofocuser needs to talk to more than one system. Another example of a controller is the scheduler. </li></ul><ul><li>This explains the splitting up of the source code into instruments, drivers and interfaces. In addition the source code contains sections on core, utilities and controllers. </li></ul><ul><li>At the moment the software instruments in chimera consist of a camera, dome, filterwheel, focuser and telescope. </li></ul><ul><li>In principle many of the chimera components can be on separate computers connected only by the internet. Pyro takes care of the network communication details. </li></ul><ul><li>Thus, it is possible to have an instrument connected by wire to one PC, but the driver for that instrument on another PC, the software instrument on a third PC and any controllers etc on a fourth PC. Options such as </li></ul><p><strong>chimera-tel –tel localhost:10000/Telescope/0</strong> </p><blockquote>can be changed to chimera-tel –tel ¡IP number¿:10000/Telescope/0 which will tell chimera the IP number of the machine where the software instrument for Telescope is located. 
</blockquote><ul><li>As an example, if the software instrument for the camera is on 128.119.52.1, the driver for that camera is on 128.138.63.28, then type </li></ul><p><strong>chimera-cam –camera 128.119.52.1:10000/Camera/0 –driver 128.138.63.28:10000/Driver/0</strong> </p><ul><li>On each PC where there is a chimera component running, a chimera manager, initiated by chimera -f ¡<strong></strong><strong>.xml¿ must be running. As before this component could be an instrument or a driver or an Interface. </li></ul><ul><li>In most cases, all the hardware instruments are connected by some type of wire to one PC at one site. </li></ul><ul><li>The </strong><strong></strong>.xml file contains details about what resources are available on the machine on which it is started. </li></ul><ul><li>So in the UFSC observatory case, the telescope is physically connected to the windows machine but the camera is physically connected to the nearby Linux machine. Thus initially, chimera -f windows.xml starts up chimera on the windows machine, informing it of the fact that it has a hardware instrument, the telescope, and its associated driver attached to it. chimera 0f linux.xml starts up the chimera on the linux machine informing it of resources that are available to it. Note the software instrument for the telescope, the telescope interface, camera, camera driver, camera interface reside on the linux machine. </li></ul><h2><a name="Flow"></a>Flow<a href="#Flow" class="section_anchor"></a></h2><ul><li>To start up chimera, you need to use chimera -f ¡some file¿ on all the PC’s involved in the system. This file, currently in xml contains details about the location of that PC, location of other PC’s in the system, what instruments/drivers etc. to load and where they are located. It also starts up managers on all these machines. </li></ul><ul><li>If you start up chimera-cam as in 4), this sends a request to the manager running on that machine which forwards that request to the machine where the camera’s stuff is located. The machine on this manager receives the request, wakes up the ”camera software instrument” which sends the request to the location where the camera driver is. The manager on this machine receives the request, wakes up the camera driver which sends the request down some line which is physically connected to the camera. Information about what happened is sent back through this chain and results in information displayed on the terminal where the original camera request was issued. </li></ul><hr/><h1><a name="2/11_Meeting"></a>2/11 Meeting<a href="#2/11_Meeting" class="section_anchor"></a></h1><p>We met with Dr. Kanbur on 2/11 and these were the answers we got for our questions. </p><p>What is the package structure? <ul><li>Controllers– things that use everything else. </li><li>Instruments </li><li>Interface– contract between the drivers and the instruments. User doesn’t have to worry about the interface – all that needs to change is the driver. </li><li>Drivers </li><li>Hardware </li></ul></p><p>Can we test on hardware <ul><li>Maybe later. (end of semester) Just work on fake telescope - Fakecamera.py in source chimera drivers shows how the virtual observatory is done. </li></ul></p><p>Getting feedback for modules and command line interface? <ul><li>With the file, we will be able to get feedback </li></ul></p><p>What are security issues w/ raw input? <ul><li>There will be issues but we are not going to deal with it right now. If you have ideas about how to make it secure without limiting functionality. </li></ul></p><p>Stand alone vs. web interface? <ul><li>He does not have a preference wither way. The jar file should be in with the program. Under source there is a GUI subdirectory. </li></ul></p><p>What parts are correct/not working: <ul><li>Most things work. If you gave the program 10 objects, it should run through all 10. He wants it to be more robust and debug. </li></ul></p><p>Data pre-collected or real time? <ul><li>Data will be pre-collected for the beginning. </li></ul></p><p>Install script re-write? <ul><li>We want to make it better. Make it as easy as possible. Easy install does not seem to work. Just have it work with Linux for right now but eventually wants to work with windows. </li></ul></p><p>What has and hasn&#x27;t worked? <ul><li>Design should be as modular as possible. </li></ul></p><p>Details about Database? <ul><li>Want to save the images and create a database – needs to be free. Currently the images are stored in different directories named by the date. </li></ul></p><p>Formulas? <ul><li>The majority of the formulas are done already - they are in the program. </li></ul></p>
 </div>
 </div>
 </td><tr>
</table>
 </div>


 
 
 
 
 <br>
 <div class="artifactcomment">
 <span class="indicator">&#9658;</span> <a href="https://www.google.com/accounts/ServiceLogin?service=code&amp;ltmpl=phosting&amp;continue=https%3A%2F%2Fcode.google.com%2Fp%2Fcsc480-chimera%2Fwiki%2FSashiMeetingNotes&amp;followup=https%3A%2F%2Fcode.google.com%2Fp%2Fcsc480-chimera%2Fwiki%2FSashiMeetingNotes"
 >Sign in</a> to add a comment
 </div>
 
 
 
 
 <form name="delcom" action="../w/delComment.do" method="POST">
 <input type="hidden" name="sequence_num" value="" >
 <input type="hidden" name="create_time" value="" >
 <input type="hidden" name="mode" value="" >
 <input type="hidden" name="pagename" value="SashiMeetingNotes" >
 <input type="hidden" name="token" value="" >
 </form>


 <script src="https://ssl.gstatic.com/codesite/ph/4119706131923068122/js/prettify/prettify.js"></script>
 <script type="text/javascript">
 prettyPrint();
 </script>

<script type="text/javascript" src="https://ssl.gstatic.com/codesite/ph/4119706131923068122/js/dit_scripts.js"></script>



  
 
 
 <script type="text/javascript" src="https://ssl.gstatic.com/codesite/ph/4119706131923068122/js/ph_core.js"></script>
 
 <script type="text/javascript" src="https://ssl.gstatic.com/codesite/ph/4119706131923068122/js/ph_dwiki.js"></script>
 
 
 
 
</div> 

<div id="footer" dir="ltr">
 <div class="text">
 <a href="/projecthosting/terms.html">Terms</a> -
 <a href="http://www.google.com/privacy.html">Privacy</a> -
 <a href="/p/support/">Project Hosting Help</a>
 </div>
</div>
 <div class="hostedBy" style="margin-top: -20px;">
 <span style="vertical-align: top;">Powered by <a href="http://code.google.com/projecthosting/">Google Project Hosting</a></span>
 </div>

 
 


 
 </body>
</html>


