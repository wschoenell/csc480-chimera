#Summary Notes from Meetings and emails from Sashi

= Introduction =

Here is an ongoing list of notes from meetings with Dr. Kanbur as well as emails sent from him.

----
=2/11 How to use UFSC Observatory=

To use Chimera at the UFSC observatory:

•	Start up Chimera on the windows machine. This machine controls the
telescope through the mount.

chimera -f windows.xml

Note this is only for the UFSC Observatory because the telescope
mount is proprietary software and can only run on the windows ma-
chine.

•	Then on the linux machine, login and type chimera -f linux.xml
If all goes well, some messages giving information about the status of
the system should appear on the screen. Typing

chimera -f linux.xml –vv

will give you more information about whats going on.

•	Then to point the telescope, type on the Linux machine

chimera-tel –tel localhost:10000/Telescope/0 –slew –ra=¡coords¿
–dec=¡coords¿

•	To take an image with the camera, on the Linux machine type

chimera-cam –camera localhost:10000/Camera/0 -n¡number
of exposures¿ -t¡exposure time in seconds¿ -o¡basename of fits
file¿

The option -s can be used with OPEN and/or CLOSE to open or close
the camera shutter.

•	To take a bias, close the shutter and set the exposure time to t=0.

•	To take a dark, close the shutter and set the exposure time to be similar
to the exposure time for the science image.

•	To change the filter and take an exposure with a new filter type

chimera-cam –camera localhost:10000/Camera/0 –wheel lo-
calhost:10000/FilterWheel/0 -f ¡filteroption¿ -n ¡number of
exposures¿ -t ¡exposure time in seconds¿ -o ¡basename of FITS
image files¿ -s ¡OPEN/CLOSE¿


•	The available filter options at UFSC are CLEAR (no filter), RED,
BLUE, GREEN, VIOLET and U (Extreme Violet).

•	chimera-tel –help gives you all the options available with this. Similarly
•	for chimera-cam –help. Other instruments accessible in this way are
•	chimera-dome and chimera-focus.

Structure

•	At the lowest level you have the actual piece of hardware that you are
trying to control robotically: lets take as an example, the camera.

•	This is connected by a wire to some PC (which usually is local) which
contains the hardware driver for the camera. This hardware driver may
be supplied by the manufacturer or is some code which talks to code
supplied by the manufacturer.

•	Items 1 and 2 are hardware specific.

•	The ICamera code sets out the methods by which the Camera Driver
communicates with other objects.

•	The ICamera code is hardware independent.

•	Above these you have the ”software instrument” for the camera. This
contains code which any camera should be able to do and code to get
the driver for that camera to do exactly that. The ”ICamera” bit
sets out the methods by which the software instrument Camera can
communicate with other objects.

•	Generalizing this, for any Chimera object, we have the hardware, the
driver, the interface and the software for that particular object.

•	In addition, there can be a finer division of ”things” into (driver, interface, instrument). For example, there can also be an ICameradriver
interface which sets out the ways in which the Camera driver communicates 
with other objects. Another example is that the interface for the
Camera software instrument is actually made up of the interfaces for a
Basic Camera, a Basic Camera which can take and abort exposures and
another interface which consists of a Basic Camera which also supports
temperature monitoring and control.

•	Above the software instrument is the interface to the user. Currently
its chimera-cam or chimera-tel or chimera-dome but hopefully these
will be replaced by some GUI.

•	An analogy is a PC running some operating system. The manual is
the I**** code, the set of allowed commands and the way anybody can
communicate with the PC and vice versa. The operating system is the
”software instrument”. You, the user and the operating system have
agreed that each can only talk to the other through what is layed out in
the manual. Similarly the IDriver is the manual that describes how the
operating system and CPU can talk to each other. The combination of
driver and actual instrument are the guts of the PC. I look up in the
manual what ”ls” means” (I**** code), type in ls (”software instru-
ment”) and get back a list of files (driver plus actual instrument). In
theory, if I get a new PC running linux, I should be able to just plug in
my existing keyboard, read the manual and get the same result when
I type in ”ls”.

•	Controllers are roughly at the level of chimera-cam or chimera-tel and
are used when more than one system, say the camera and telescope
and focuser are in use. For example, the autofocuser. The Telescope
moves to an object, the camera takes a picture and the autofocuser
determines if the object is in focus - if not, the autofocuser adjusts the
focus, tells the camera to take another picture etc. So the autofocuser
needs to talk to more than one system. Another example of a controller
is the scheduler.

•	This explains the splitting up of the source code into instruments,
drivers and interfaces. In addition the source code contains sections
on core, utilities and controllers.

•	At the moment the software instruments in chimera consist of a camera,
dome, filterwheel, focuser and telescope.

•	In principle many of the chimera components can be on separate computers connected only by the internet. Pyro takes care of the network
communication details.

•	Thus, it is possible to have an instrument connected by wire to one
PC, but the driver for that instrument on another PC, the software
instrument on a third PC and any controllers etc on a fourth PC.
Options such as

chimera-tel –tel localhost:10000/Telescope/0

•	can be changed to chimera-tel –tel ¡IP number¿:10000/Telescope/0
which will tell chimera the IP number of the machine where the software
instrument for Telescope is located.

•	As an example, if the software instrument for the camera is on 128.119.52.1,
the driver for that camera is on 128.138.63.28, then type

chimera-cam –camera 128.119.52.1:10000/Camera/0 –driver
128.138.63.28:10000/Driver/0

•	On each PC where there is a chimera component running, a chimera
manager, initiated by chimera -f ¡***.xml¿ must be running. As be-
fore this component could be an instrument or a driver or an Interface.

•	In most cases, all the hardware instruments are connected by some type
of wire to one PC at one site.

•	The ***.xml file contains details about what resources are available on
the machine on which it is started.

•	So in the UFSC observatory case, the telescope is physically connected
to the windows machine but the camera is physically connected to the
nearby Linux machine. Thus initially, chimera -f windows.xml starts up
chimera on the windows machine, informing it of the fact that it has a
hardware instrument, the telescope, and its associated driver attached
to it. chinera 0f linux.xml starts up the chimera on the linux machine
infomring it of resources that are available to it. Note the software
instrument for the telescope, the telescope interface, camera, camera
driver, camera interface reside on the linux machine.

Flow

•	To start up chimera, you need to use chimera -f ¡some file¿ on all the
PC’s involved in the system. This file, currently in xml contains details
about the location of that PC, location of other PC’s in the system,
what instruments/drivers etc. to load and where they are located. It
also starts up managers on all these machines.

•	If you start up chimera-cam as in 4), this sends a request to the manager
running on that machine which forwards that request to the machine
where the camera’s stuff is located. The machine on this manager receives 
the request, wakes up the ”camera software instrument” which
sends the request to the location where the camera driver is. The man-
ager on this machine receives the request, wakes up the camera driver
which sends the request down some line which is physically connected
to the camera. Information about what happened is sent back through
this chain and results in information displayed on the terminal where 
the original camera request was issued.




----
= 2/11 Meeting =

We met with Dr. Kanbur on 2/11 and these were the answers we got for our questions.

What is the package structure?
    * Controllers– things that use everything else.
    * Instruments
    * Interface– contract between the drivers and the instruments. User doesn’t have to worry about the interface – all that needs to change is the driver.
    * Drivers
    * Hardware


Can we test on hardware
    * Maybe later. (end of semester) Just work on fake telescope - Fakecamera.py in source chimera drivers shows how the virtual observatory is done.


Getting feedback for modules and command line interface?
    * With the file, we will be able to get feedback


What are security issues w/ raw input?
    * There will be issues but we are not going to deal with it right now. If you have ideas about how to make it secure without limiting functionality.


Stand alone vs. web interface?
    * He does not have a preference wither way. The jar file should be in with the program. Under source there is a GUI subdirectory.


What parts are correct/not working:
    * Most things work. If you gave the program 10 objects, it should run through all 10. He wants it to be more robust and debug.


Data pre-collected or real time?
    * Data will be pre-collected for the beginning.


Install script re-write?
    * We want to make it better. Make it as easy as possible. Easy install does not seem to work. Just have it work with Linux for right now but eventually wants to work with windows.


What has and hasn't worked?
    * Design should be as modular as possible.


Details about Database?
    * Want to save the images and create a database – needs to be free. Currently the images are stored in different directories named by the date.


Formulas?
    * The majority of the formulas are done already - they are in the program.