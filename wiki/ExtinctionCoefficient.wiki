#summary How Chimera will compute the Extinction Coefficient

= Introduction =

Our requirements document is found here: http://csc480-chimera.googlecode.com/files/ExtinctionCoefficient_Requirements_Doc.pdf

Steps to compute extinction coefficient:

 * `public computeExtinctionCoefficient(raDec, latitude, flux[], lst[])` 
   # raDec and latitude are supplied by the image or database. Flux and LST are specific  to each image. This function returns the slope of a fitted line to the points. 
   # This function calls computeEC for each image, which gives us `magnitude[]`, `airmass[]`.
   # Run a least squares fit on `magnitude[]`, `airmass[]`. Use NumPy for this.
   # Return the numeric value here (the extinction coefficient).
   # Call the automated graphing system (GNUPlot).

 * `private computeEC(raDec, latitude, flux, lst)` called by computeExtinctionCoefficient. Returns Airmass and Magnitude.
   # Local Sidereal Time (lst) is given to us.
   # Call function raDectoAltAz(raDec, latitude, lst) in position.py. This returns altitude and azimuth.
   # Compute airmass = 1/cos(altitude).
   # Compute magnitude = -2.5*log(flux)
   # return airmass and magnitude for the given star.

Note - in case we for some reason in the future might need to calculate the Local Sidereal Time, Shashi gave me this site: http://www.pietro.org/Astro_Util_StaticDemo/FDetailSiderealConv.htm

Here is our current code, this is working for passing a directory and computing the extinction coefficient from FITS files! We are currently waiting on the interface to the database then we will be able to complete that section. This integrates our code for generating graphs as well - it is an automated process.
{{{
from seeing import Seeing 
from chimera.core.site import Site
from chimera.util.position import Position
from chimera.util.coord import Coord
import numpy as np
import math
import os, glob, sys
import pyfits

#USING THE EXTINCTION COEFFICIENT MODULE:
#python extinction.py [-f:<path to images> | ra=<RA> dec=<DEC> s=<Start Time> e=<End Time>] -o:<Output image filename>
#Using the path to images will read the fits file headers for RA, DEC and altitude. 
#Using the DB will read the LST from the DB and calculate ext. coeff from there.

#This sets latitude, we need to pull this from the fits or DB, default is the brazil telescope.
latitude = Coord.fromHMS('-22:32:04.000')

#Default to DB mode
filemode=0

#Command processing
for arg in sys.argv:
  if arg.startswith("-f:"): #find if this is folder search.
    path=arg.lstrip("-f:")
    filemode=1
  elif arg.startswith("ra"):
    ra=Coord.fromHMS(arg.lstrip("ra"))
  elif arg.startswith("dec"):
    dec=Coord.fromHMS(arg.lstrip("dec"))
  elif arg.startswith("s"):
    starttime=arg.lstrip("s")
  elif arg.startswith("e"):
    endtime=arg.lstrip("e")

seeing = Seeing()

#Computes the coefficient. takes arrays: flux, altitude
def computeExtinctionCoefficient(flux, altitudeArr):
	#These will be needed for our output.
	magnitude = []
	airmass = []

	#Make radec a global var
	global radec

	#Iterate over each of the arrays to call computeEC
	for i in range(len(flux)):
		temparr = computeEC(flux[i], altitudeArr[i])
		magnitude.append(temparr[0])
		airmass.append(temparr[1])

	#Print out magnitudes
	print "Magnitudes:"
	print magnitude

	#Print out airmasses
	print "Airmasses:"
	print airmass

	#Now run a least squares fit and return the slope of the line.
	#We arent sure which order these come back in!
	m,b = np.polyfit(airmass,magnitude,1)

	#Print out m,b
	print "M value:", m
	print "B value:", b

	#Test plot
	plotViaGnuplot("name","x",airmass,"y",magnitude,m,b)

	return m

#Compute from the array of fluxes and array of local sidereal times the extinction coefficient.
def computeExtinctionWithLST(flux, lstArr):
	altArr = []
	aTuple = ra, dec
	raDec = Position(aTuple)
	for lst in lstArr:
		#this returns the altitude and azimuth
		altAz = radec.raDecToAltAz(raDec, latitude, lst)
		#Get the altitude
		altArr.append(altAz.alt)
	computeExtinctionCoefficient(flux, altArr)

#Compute the magnitude and airmass from specific raDec (of type Position), flux values.
def computeEC(flux, altitude):
	#airmass calculation
	airmass = 1/math.cos(altitude)
	#magnitude calculation
	magnitude = 2.5*math.log(flux)
	return [magnitude,airmass]

# Generates a data file (fileName.dat), a gnuplot batch file (fileName.gnu)
#  and a PNG image of the plot (fileName.png)
def plotViaGnuplot(fileName, x_label, x_list, y_label, y_list, m, b):
    # Set path to the gnuplot binary
    gpPath = "gnuplot"

    # Set output type and file extension
    terminalType = "png"    # Alternatives: jpeg, gif, postscript, pdf, etc.
    extension = ".png"      # Alternatives: jpg, gif, ps, pdf, etc.

    # Create space-delimited data file
    file = open(fileName + ".dat", "w")
    for i in range(len(x_list)):
        print >> file, str(x_list[i]) + ' ' + str(y_list[i])
    file.flush()
    file.close()

    # Create gnuplot batch file
    file = open(fileName + ".gnu", "w")
    print >> file, "set terminal " + terminalType
    print >> file, "set output \"" + fileName + extension + "\""
    print >> file, "set xlabel \"" + x_label + "\""
    print >> file, "set ylabel \"" + y_label + "\""
    print >> file, "set xrange [ " + str(min(x_list) - 1) + " : " + str(max(x_list) + 1) + " ]"
    print >> file, "set yrange [ " + str(min(y_list) - 1) + " : " + str(max(y_list) + 1) + " ]"
    print >> file, "set mxtics 5"
    print >> file, "set mytics 5"
    print >> file, "set xtics " + str((max(x_list) - min(x_list)) / 5)
    print >> file, "set ytics " + str((max(y_list) - min(y_list)) / 5)
    print >> file, "f(x) = " + str(m) + " * x + " + str(b)
    print >> file, "plot f(x) notitle with lines, \"" + fileName + ".dat\" using 1:2 notitle"
    file.flush()
    file.close()

    # Run gnuplot, passing in the batch file
    os.system(gpPath + " " + fileName + ".gnu")


def doFileModeEC():
  #Initial setup variables, these will be passed to CalculateExtinctionCoefficient
  fluxArr = []
  altArr = []
  for infile in glob.glob( os.path.join(path, '*.fits') ):
    print "current file is: " + infile
    #Read the Altitude from the FITS file
    hdulist = pyfits.open(infile)
    altCoord = Coord.fromHMS(hdulist[0].header['ALT'])
    altArr.append(altCoord.toR())
    #Get the RA and DEC for this star
    ra = Coord.fromHMS(hdulist[0].header['RA'])
    dec = Coord.fromHMS(hdulist[0].header['DEC'])
    #Run the file through seeing
    seeing.run(infile)
    star = seeing.getStarClosestTo(ra, dec)
    fluxArr.append(seeing.getFlux(star))
  print fluxArr
  print altArr
  print  computeExtinctionCoefficient(fluxArr, altArr)
##END doFileModeEC()


def doDatabaseModeEC():
  print "Not implemented yet"
  #When implemented, this will call computeExtinctionWithLST(flux, lstArr)
##END doDatabaseModeEC()

if filemode:
  doFileModeEC()
else:
  doDatabaseModeEC()
}}}

Further description of the process for calculating the extinction coefficient is available at: http://star-www.rl.ac.uk/star/dvi/sc6.htx/node15.html


*Chimera Extinction Coefficient Module Test Plan*

The test plan we have developed for the Extinction Coefficient module of the Chimera robotic telescope application is rooted firmly in the use of PyUnit tests. We will test the known bounds of the inputs to ensure they are within the acceptable ranges, and we will test on specific data to ensure that we are presented with a value equal to what is expected.

Known Input Bounds:

 * Ra: Ranges from 0-180 degrees
 * Dec: Ranges from 0-360 degrees
 * Latitude: Ranges from 0-180 degrees
 * Flux: Greater than 0

*Database Stub Class*
{{{
class DatabaseStub:
    """
    Preliminary interface to database that simply returns hard-coded data
    """
    def queryStar(self, RA, dec):
        """
        TODO - code to communicate with databse interface
        Will search database to return all stars at a certain RA/Dec
        """
        return 0

    def queryMagnitude(self, starID)
        """
        TODO - code to communicate with databse interface
        Retrieves the magnitude of the designated star (starID)
        """
        return 2

    def queryExposures(self, starID):
        """
        TODO - returns an array of all of the exposures related to
        the starID
        """
        return 0

    def queryLST(self, exposureID):
        """
        TODO - code to communicate with databse interface
        Retrieves the local sidereal time of the designated exposure (starID)
        """
        return 1

    def queryFlux(self, starID):
        """
        TODO - code to communicate with databse interface
        Retrieves the flux of the designated star (starID)
        """
        return 3

    def writeEC(self, extID, EC):
        """        
        TODO - code to communicate with databse interface
        Writes extinction coefficient (EC) to the designated EC. table (extID)
        """
        return EC

    def writeTimeStart(self, extID, time):
        """        
        TODO - code to communicate with databse interface
        Writes LST start time (time) to the designated EC. table (extID)
        """
        return time

    def writeTimeEnd(self, extID, time):
        """
        TODO - code to communicate with databse interface
        Writes LST end time (time) to the designated EC. table (extID)
        """
        return time

    def createTable(self, extID):
        """
        TODO - code to communicate with databse interface
        Writes LST start (time) to the designated EC. table (extID)
        """    
        return extID
}}}