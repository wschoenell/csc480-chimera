#summary How Chimera will compute the Extinction Coefficient

= Introduction =

Steps to compute extinction coefficient:

 * `public computeExtinctionCoefficient(raDec[], latitude[], flux[])` called by EXTERNAL code.
   # For each element in raDec, latitude, flux call computeEC. This returns magnititude, airmass. Store in `magnitude[], airmass[]`.
   # Run a least squares fit on magnitude, airmass.
   # Return the numeric value here (the extinction coefficient).

 * `private computeEC(raDec, latitude, flux)` called by computeExtinctionCoefficient. Returns Airmass and Magnitude.
   # Compute Local Sidereal Time (lst) (call LST(self) in core/site.py)
   # Call function raDectoAltAz(raDec, latitude, lst) in position.py. This returns altitude and azimuth.
   # Compute airmass = 1/cos(altitude).
   # Compute magnitude = 2.5*log(flux)
   # return airmass and magnitude.

Note there will also be a least squares package we will include with this, but this is the main outline of what we have to do. My thought is that we use this one: http://www.aps.anl.gov/bcda/dataVis/fit.py.html

Also, the data in computeExtinctionCoefficient can be used for a graph.

Note - in case LST doesn't work, Shashi gave me this site: http://www.pietro.org/Astro_Util_StaticDemo/FDetailSiderealConv.htm

Here is some code which needs refinement, but should be almost working:
{{{
from chimera.core.site import Site
from chimera.util.position import Position

#Computes the coefficient. takes arrays: raDec, latitude, flux.
def computeExtinctionCoefficient(raDec, latitude, flux)
    #These will be needed for our output.
    magnitude = zeros([len(raDec)], Float)
    airmass = zeros([len(raDec), Float)

    #Iterate over each of the arrays to call computeEC
    for i in range(len(raDec)):
        temparr = computeEC(raDec[i], latitude[i], flux[i])
        magnitude[i] = temparr[0]
        arimass[i] = temparr[1]

    #TODO: Now run a least squares fit and return the coefficient.


#Compute the magnitude and airmass from specific raDec, latitude, flux values.
def computeEC(raDec, latitude, flux)
    #A site object so we can compute LST
    site = Site()
    #Local Sidereal Time
    lst = site.LST()
    #this returns the altitude and azimuth
    altAz = raDecToAltAz(raDec, latitude, lst)
    #This line may or may not work:
    altitude = altAz.alt
    #airmass calculation
    airmass = 1/math.cos(altitude)
    #magnitude calculation
    magnitude = 2.5*math.log(flux)
    return array([magnitude,airmass])
}}}

Further description of the process is available at: http://star-www.rl.ac.uk/star/dvi/sc6.htx/node15.html