#summary The call stack of chimera - order of startup
#labels Phase-Deploy,Featured

= Introduction =
This is a basic description of what is run in order to get chimera started


= Details =


*******************************
**                           **
** /usr/bin/chimera contains **
**                           **
*******************************
{{{
#!/usr/bin/python
# EASY-INSTALL-SCRIPT: 'chimera-python==0.2.dev-r415','chimera'
__requires__ = 'chimera-python==0.2.dev-r415'
import pkg_resources
pkg_resources.run_script('chimera-python==0.2.dev-r415', 'chimera')
}}}


*******************************
**                           **
** calling it produces       **
**                           **
*******************************
{{{
sdoherty@linux-laptop:/usr/bin$ chimera
15-02-2009 19:24:33.370 WARNING chimera log.py:85 Couldn't start Log System FileHandler ([Errno 13] Permission denied: '/home/sdoherty/.chimera/chimera.log')
[Errno 13] Permission denied: '/usr/bin/_pyro_vjBV-h.tmp'
Traceback (most recent call last):
  File "/usr/bin/chimera", line 5, in <module>
    pkg_resources.run_script('chimera-python==0.2.dev-r415', 'chimera')

  File "/usr/lib/python2.5/site-packages/pkg_resources.py", line 448, in run_script
    self.require(requires)[0].run_script(script_name, ns)

  File "/usr/lib/python2.5/site-packages/pkg_resources.py", line 1166, in run_script
    execfile(script_filename, namespace, namespace)

  File "/usr/lib/python2.5/site-packages/chimera_python-0.2.dev_r415-py2.5.egg/EGG-INFO/scripts/chimera", line 31, in <module>
    main()

  File "/usr/lib/python2.5/site-packages/chimera_python-0.2.dev_r415-py2.5.egg/EGG-INFO/scripts/chimera", line 27, in main
    SiteController(sys.argv).startup()

  File "/usr/lib/python2.5/site-packages/chimera_python-0.2.dev_r415-py2.5.egg/chimera/controllers/site/main.py", line 197, in startup
    self.manager = Manager(**self.config.chimera)

  File "/usr/lib/python2.5/site-packages/chimera_python-0.2.dev_r415-py2.5.egg/chimera/core/manager.py", line 152, in __init__
    self.adapter = ManagerAdapter (self, host, port)

  File "/usr/lib/python2.5/site-packages/chimera_python-0.2.dev_r415-py2.5.egg/chimera/core/manager.py", line 75, in __init__
    Pyro.core.initServer(banner=False)

  File "/usr/lib/python2.5/site-packages/Pyro-3.8.1-py2.5.egg/Pyro/core.py", line 875, in initServer
    Pyro.config.finalizeConfig_Server(storageCheck=storageCheck)

  File "/usr/lib/python2.5/site-packages/Pyro-3.8.1-py2.5.egg/Pyro/configuration.py", line 128, in finalizeConfig_Server
    raise IOError('no write access to PYRO_STORAGE ['+self.PYRO_STORAGE+']')

IOError: no write access to PYRO_STORAGE [/usr/bin]
Exception exceptions.AttributeError: "ManagerAdapter instance has no attribute 
'NameServer'" in <bound method ManagerAdapter.__del__ of 
<chimera.core.manager.ManagerAdapter instance at 0x9c608ac>> ignored
}}}


*******************************
**                           **
** from this may be deduced  **
**                           **
*******************************

  # ) the permissions of /home/sdoherty/.chimera/chimera.log need to be changed OR chimera needs to be run as root
  # ) /usr/lib/python2.5/site-packages/pkg_resources.py is being used to find the package 
  # ) chimera_python-0.2.dev_r415-py2.5.egg is being called by the startup script
  # ) the egg contains a EGG-INFO/scripts folder that contains the startup scripts


----
=== Order of files called ===
  # /usr/bin/chimera
  # /usr/lib/python2.5/site-packages/pkg_resources.py
  # /usr/lib/python2.5/site-packages/chimera_python-0.2.dev_r415-py2.5.egg/EGG-INFO/scripts/chimera
  # /usr/lib/python2.5/site-packages/chimera_python-0.2.dev_r415-py2.5.egg/chimera/controllers/site/main.py
  # /usr/lib/python2.5/site-packages/chimera_python-0.2.dev_r415-py2.5.egg/chimera/core/manager.py
  # /usr/lib/python2.5/site-packages/Pyro-3.8.1-py2.5.egg/Pyro/core.py
  # /usr/lib/python2.5/site-packages/Pyro-3.8.1-py2.5.egg/Pyro/configuration.py

=== Explanation ===
<table border="1" style="border-collapse:collapse;">
<tbody>
<tr><th> *Call* </th><th> *Snippit* </th><th> *Result* </th></tr>

<tr valign="top">
<td valign="top"> `/usr/bin/chimera` </td>
<td valign="top">
{{{
#!/usr/bin/python
# EASY-INSTALL-SCRIPT: 'chimera-python==0.2.dev-r415','chimera'
__requires__ = 'chimera-python==0.2.dev-r415'
import pkg_resources
pkg_resources.run_script('chimera-python==0.2.dev-r415', 'chimera')
}}}
</td>
<td valign="top"> This is the "binary" package which calls
<ul>
<li> *`/usr/lib/python2.5/site-packages/pkg_resources.py`* which looks into the </li>
<li> *`/usr/lib/python2.5/site-packages/chimera_python-0.2.dev_r415-py2.5.egg/`* and into its </li>
<li> *`EGG-INFO/scripts`* folder and runs the </li>
<li> *`chimera`* script </li>
</ul>
</td>
</tr>


<tr>
<td valign="top">`/usr/lib/python2.5/site-packages/chimera_python-0.2.dev_r415-py2.5.egg/EGG-INFO/scripts/chimera` </td>
<td valign="top">
{{{
#!/usr/bin/python
def main ():

import sys

from chimera.controllers.site.main import SiteController

SiteController(sys.argv).startup()


if __name__ == '__main__':
main()
}}}
</td>
<td valign="top"> which defines a *`main`* method and calls that main method. this main method calls *`chimera.controllers.site.main`* which defines the class *`SiteController`*, it imports that class and calls *`SiteController(sys.argv).startup()`* on that class </td>
</tr>


<tr>
<td valign="top">`/usr/lib/python2.5/site-packages/chimera_python-0.2.dev_r415-py2.5.egg/chimera/controllers/site/main.py`</td>
<td valign="top">
{{{
def startup(self):

if self.options.daemon:
# detach
log.info("FIXME: Daemon...")

# system config
self.config = SystemConfig.fromFile(self.options.config_file, self.options.use_global)

# manager
if not self.options.dry:
log.info("Starting system.")
log.info("Chimera version: %s" % find_dev_version() or _chimera_version_)
log.info("Chimera prefix: %s" % ChimeraPath.root())

try:
self.manager = Manager(**self.config.chimera)
except ChimeraException, e:
log.error("Chimera is already running on this machine. Use chimera-admin to manage it.")
sys.exit(1)

log.info("Chimera: running on "+ self.manager.getHostname() + ":" + str(self.manager.getPort()))
if self.options.use_global:
log.info("Chimera: reading configuration from %s" % SYSTEM_CONFIG_DEFAULT_GLOBAL)
log.info("Chimera: reading configuration from %s" % os.path.realpath(self.options.config_file))

# add site object
if not self.options.dry:

for site in self.config.sites:
self.manager.addClass(Site, site.name, site.config, True)

# search paths
log.info("Setting objects include path from command line parameters...")
for _dir in self.options.inst_dir:
self.paths["instruments"].append(_dir)

for _dir in self.options.ctrl_dir:
self.paths["controllers"].append(_dir)

for _dir in self.options.drv_dir:
self.paths["drivers"].append(_dir)

# init from config
log.info("Trying to start drivers...")
for drv in self.config.drivers + self.options.drivers:

if self.options.dry:
print drv
else:
self._add(drv, path=self.paths["drivers"], start=True)

log.info("Trying to start instruments...")
for inst in self.config.instruments + self.options.instruments:

if self.options.dry:
print inst
else:
self._add(inst, path=self.paths["instruments"], start=True)

log.info("Trying to start controllers...")
for ctrl in self.config.controllers + self.options.controllers:

if self.options.dry:
print ctrl
else:
self._add(ctrl, path=self.paths["controllers"], start=True)

log.info("System up and running.")

# ok, let's wait manager work
if self.wait and not self.options.dry:
self.manager.wait()

}}}
</td>

<td valign="top">
This is the startup method which calls `Manager(**self.config.chimera)`
Note: you can see the log.info method is the stuff printed when starting chimera
</td>
</tr>




<tr>
<td valign="top">`/usr/lib/python2.5/site-packages/chimera_python-0.2.dev_r415-py2.5.egg/chimera/core/manager.py`</td>
<td valign="top">
{{{


class Manager (RemoteObject):

"""
This is the main class of Chimera.

Use this class to get Proxies, add objects to the system, and so on.

This class handles objects life-cycle as described in ILifecycle.

@group Add/Remove: add*, remove
@group Start/Stop: start, stop
@group Proxy: getProxy
@group Shutdown: wait, shutdown

"""

def __init__(self, host = None, port = None, local=False):
RemoteObject.__init__ (self)

log.info("Starting manager.")

self.resources = ResourcesManager()
self.classLoader = ClassLoader()

# identity
self.setGUID(MANAGER_LOCATION)

# shutdown event
self.died = threading.Event()

if not local:
    try:
        ManagerLocator.locate()
        raise ChimeraException("Chimera is already running"
                               " on this system. Use chimera-admin"
                               " to manage it.")
    except ManagerNotFoundException:
        # ok, we are alone.
        pass

# our daemon server
self.adapter = ManagerAdapter (self, host, port)
self.adapterThread = threading.Thread(target=self.adapter.requestLoop)
self.adapterThread.setDaemon(True)
self.adapterThread.start()

# finder beacon
if not local:
    self.beacon = ManagerBeacon(self)
    self.beaconThread = threading.Thread(target=self.beacon.run)
    self.beaconThread.setDaemon(True)
    self.beaconThread.start()
else:
    self.beacon = None

# register ourself
self.resources.add(MANAGER_LOCATION, self, getManagerURI(self.getHostname(), self.getPort()))

# signals
signal.signal(signal.SIGTERM, self._sighandler)
signal.signal(signal.SIGINT, self._sighandler)
atexit.register (self._sighandler)


}}}
</td>
<td valign="top">The file manager.py contains multiple classes.  It contains Manager and ManagerAdapter.  Here is where the constructor for the class Manager is called which creates a MangerAdapter after the comment  # our daemon server. Note the comment
{{{
 """
This is the main class of Chimera.
Use this class to get Proxies, 
add objects to the system, and so on.
This class handles objects life-cycle
 as described in ILifecycle.
"""
}}}
</td>
</tr>


<tr>
<td valign="top">`/usr/lib/python2.5/site-packages/chimera_python-0.2.dev_r415-py2.5.egg/chimera/core/manager.py`</td>
<td valign="top">
{{{
class ManagerAdapter (Pyro.core.Daemon):

    def __init__ (self, manager, host = None, port = None):

        Pyro.core.initServer(banner=False)
        
        Pyro.core.Daemon.__init__ (self,
                                   host=host or MANAGER_DEFAULT_HOST,
                                   port=port or MANAGER_DEFAULT_PORT,
                                   norange=0)

        self.useNameServer(None)
        self.connect (manager)

        # saved here to give objects a manager when they ask
        self.manager = manager

        self.getAdapter().setTimeout(None)

    def getManager (self):
        return self.manager

    def getProxyForObj(self, obj):
        return Proxy(uri=Pyro.core.PyroURI(self.hostname,
                                           obj.GUID(), prtcol=self.protocol, port=self.port))

    def connect(self, obj, name=None, index=None):

        URI = Pyro.core.PyroURI(self.hostname, obj.GUID(), prtcol=self.protocol, port=self.port)

        self.implementations[obj.GUID()] = (obj, name)            
        
        if index:
            self.implementations[index] = (obj, name)

        obj.setPyroDaemon(self)

        return URI


}}}
</td>
<td valign="top">The file manager.py contains multiple classes.  It contains Manager and ManagerAdapter.  Here is the class definition for ManagerAdapter is called which calls on the Pyro package to initialize a server. This seems to act like a singleton class which returns the server if it is already created.  
This pyro package is dependent upon /usr/lib/python2.5/site-packages/Pyro-3.8.1-py2.5.egg/Pyro/configuration.py
</td>
</tr>


</tbody>
</table>